{"version":3,"sources":["webpack:///./src/components/Event/Countdown.js"],"names":["Countdown","startDate","useState","remainTime","setRemainTime","useEffect","interval","setInterval","remainInSecond","Math","floor","getTime","Date","now","days","seconds","hours","minutes","time","String","padStart","join","clearInterval","className","styles"],"mappings":"4FAAA,qDA6CeA,UA1CG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAClB,EAAoCC,mBAAS,MAAtCC,EAAP,KAAmBC,EAAnB,KA8BA,OA7BAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3B,IAAMC,EAAiBC,KAAKC,OAAOT,EAAUU,UAAYC,KAAKC,OAAO,KACrE,GAAIL,GAAkB,EAAG,CACvB,IAAIM,EAAOL,KAAKC,MAAMF,EAAe,OACjCO,EAAUP,EAAqB,MAAJM,EAC3BE,EAAQP,KAAKC,MAAMK,EAAO,MAC9BA,GAAmB,GAARC,EAAa,GACxB,IAAIC,EAAUR,KAAKC,MAAMK,EAAU,IACnCA,GAAqB,GAAVE,EAEX,IAAMC,EAAO,CAACC,OAAOH,GAAOI,SAAS,EAAG,KAAMD,OAAOF,GAASG,SAAS,EAAG,KAAMD,OAAOJ,GAASK,SAAS,EAAG,MAAMC,KAAK,KAErHjB,EADEU,EAAO,EACQA,EAAJ,UAAkBI,EACb,IAATJ,EACK,UAAUI,EAEVA,QAGhBd,EAAc,MACdkB,cAAchB,KAEf,KACH,OAAO,WACLgB,cAAchB,MAEf,IAEEH,EAKH,yBAAKoB,UAAWC,IAAOxB,WACpBG,GALM","file":"18-c67f89d017dca75b87cd.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport styles from \"./styles.module.css\";\n\nconst Countdown = ({startDate}) => {\n  const [remainTime, setRemainTime] = useState(null);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const remainInSecond = Math.floor((startDate.getTime() - Date.now())/1000);\n      if (remainInSecond >= 0) {\n        let days = Math.floor(remainInSecond/(60 * 60 * 24))\n        let seconds = remainInSecond - days * (60 * 60 * 24)\n        let hours = Math.floor(seconds / (60 * 60))\n        seconds -= hours * 60 * 60\n        let minutes = Math.floor(seconds / 60)\n        seconds -= minutes * 60\n\n        const time = [String(hours).padStart(2, '0'), String(minutes).padStart(2, '0'), String(seconds).padStart(2, '0')].join(\":\");\n        if (days > 1 ) {\n          setRemainTime(`${days} days, ${time}`);\n        } else if (days === 1) {\n          setRemainTime(`1 day, ${time}`);\n        } else {\n          setRemainTime(time)\n        }\n      } else {\n        setRemainTime(null)\n        clearInterval(interval);\n      }\n    }, 1000)\n    return () => {\n      clearInterval(interval);\n    }\n  }, []);\n\n  if (!remainTime) {\n      return null;\n  }\n\n  return (\n    <div className={styles.Countdown}>\n      {remainTime}\n    </div>\n  )\n}\n\nexport default Countdown;\n"],"sourceRoot":""}